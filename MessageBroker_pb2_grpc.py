# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MessageBroker_pb2 as MessageBroker__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class MessageBrokerStub(object):
    """Service for managing message broker functionalities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToGroupChat = channel.unary_unary(
                '/MessageBroker/SubscribeToGroupChat',
                request_serializer=MessageBroker__pb2.ChatIdentifier.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.PublishMessageToGroupChat = channel.unary_unary(
                '/MessageBroker/PublishMessageToGroupChat',
                request_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ConsumeMessagesFromGroupChat = channel.unary_stream(
                '/MessageBroker/ConsumeMessagesFromGroupChat',
                request_serializer=MessageBroker__pb2.ChatIdentifier.SerializeToString,
                response_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                )


class MessageBrokerServicer(object):
    """Service for managing message broker functionalities
    """

    def SubscribeToGroupChat(self, request, context):
        """Creates the queue for a group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishMessageToGroupChat(self, request, context):
        """publish a message to a group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumeMessagesFromGroupChat(self, request, context):
        """consume messages from a group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageBrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToGroupChat': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeToGroupChat,
                    request_deserializer=MessageBroker__pb2.ChatIdentifier.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PublishMessageToGroupChat': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMessageToGroupChat,
                    request_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ConsumeMessagesFromGroupChat': grpc.unary_stream_rpc_method_handler(
                    servicer.ConsumeMessagesFromGroupChat,
                    request_deserializer=MessageBroker__pb2.ChatIdentifier.FromString,
                    response_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageBroker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageBroker(object):
    """Service for managing message broker functionalities
    """

    @staticmethod
    def SubscribeToGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageBroker/SubscribeToGroupChat',
            MessageBroker__pb2.ChatIdentifier.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishMessageToGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageBroker/PublishMessageToGroupChat',
            MessageBroker__pb2.ChatMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConsumeMessagesFromGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MessageBroker/ConsumeMessagesFromGroupChat',
            MessageBroker__pb2.ChatIdentifier.SerializeToString,
            MessageBroker__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
