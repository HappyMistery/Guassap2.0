# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MessageBroker_pb2 as MessageBroker__pb2


class MessageBrokerStub(object):
    """Service for managing message broker functionalities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishMessage = channel.unary_unary(
                '/MessageBroker/PublishMessage',
                request_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
                response_deserializer=MessageBroker__pb2.Empty.FromString,
                )


class MessageBrokerServicer(object):
    """Service for managing message broker functionalities
    """

    def PublishMessage(self, request, context):
        """Publishes a message to a specific chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageBrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishMessage,
                    request_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                    response_serializer=MessageBroker__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MessageBroker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageBroker(object):
    """Service for managing message broker functionalities
    """

    @staticmethod
    def PublishMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MessageBroker/PublishMessage',
            MessageBroker__pb2.ChatMessage.SerializeToString,
            MessageBroker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GroupChatServiceStub(object):
    """Service for managing group chat functionalities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToGroupChat = channel.unary_stream(
                '/GroupChatService/SubscribeToGroupChat',
                request_serializer=MessageBroker__pb2.ChatId.SerializeToString,
                response_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                )
        self.ConnectToGroupChat = channel.unary_stream(
                '/GroupChatService/ConnectToGroupChat',
                request_serializer=MessageBroker__pb2.ChatId.SerializeToString,
                response_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                )
        self.SendMessageToGroup = channel.unary_unary(
                '/GroupChatService/SendMessageToGroup',
                request_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
                response_deserializer=MessageBroker__pb2.Empty.FromString,
                )


class GroupChatServiceServicer(object):
    """Service for managing group chat functionalities
    """

    def SubscribeToGroupChat(self, request, context):
        """Subscribes to a group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectToGroupChat(self, request, context):
        """Connects to a group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessageToGroup(self, request, context):
        """Sends a message to the group chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToGroupChat': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToGroupChat,
                    request_deserializer=MessageBroker__pb2.ChatId.FromString,
                    response_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
            ),
            'ConnectToGroupChat': grpc.unary_stream_rpc_method_handler(
                    servicer.ConnectToGroupChat,
                    request_deserializer=MessageBroker__pb2.ChatId.FromString,
                    response_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
            ),
            'SendMessageToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessageToGroup,
                    request_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                    response_serializer=MessageBroker__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GroupChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GroupChatService(object):
    """Service for managing group chat functionalities
    """

    @staticmethod
    def SubscribeToGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GroupChatService/SubscribeToGroupChat',
            MessageBroker__pb2.ChatId.SerializeToString,
            MessageBroker__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectToGroupChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GroupChatService/ConnectToGroupChat',
            MessageBroker__pb2.ChatId.SerializeToString,
            MessageBroker__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessageToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GroupChatService/SendMessageToGroup',
            MessageBroker__pb2.ChatMessage.SerializeToString,
            MessageBroker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ChatDiscoveryStub(object):
    """Service for chat discovery
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishDiscoveryEvent = channel.unary_unary(
                '/ChatDiscovery/PublishDiscoveryEvent',
                request_serializer=MessageBroker__pb2.Empty.SerializeToString,
                response_deserializer=MessageBroker__pb2.Empty.FromString,
                )
        self.RespondToDiscoveryEvent = channel.unary_unary(
                '/ChatDiscovery/RespondToDiscoveryEvent',
                request_serializer=MessageBroker__pb2.UserAddress.SerializeToString,
                response_deserializer=MessageBroker__pb2.Empty.FromString,
                )
        self.GetDiscoveryResponses = channel.unary_stream(
                '/ChatDiscovery/GetDiscoveryResponses',
                request_serializer=MessageBroker__pb2.Empty.SerializeToString,
                response_deserializer=MessageBroker__pb2.UserAddress.FromString,
                )


class ChatDiscoveryServicer(object):
    """Service for chat discovery
    """

    def PublishDiscoveryEvent(self, request, context):
        """Publishes a discovery event to the broker
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondToDiscoveryEvent(self, request, context):
        """Responds to a discovery event with connection parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDiscoveryResponses(self, request, context):
        """Retrieves responses to the discovery event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatDiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishDiscoveryEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishDiscoveryEvent,
                    request_deserializer=MessageBroker__pb2.Empty.FromString,
                    response_serializer=MessageBroker__pb2.Empty.SerializeToString,
            ),
            'RespondToDiscoveryEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondToDiscoveryEvent,
                    request_deserializer=MessageBroker__pb2.UserAddress.FromString,
                    response_serializer=MessageBroker__pb2.Empty.SerializeToString,
            ),
            'GetDiscoveryResponses': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDiscoveryResponses,
                    request_deserializer=MessageBroker__pb2.Empty.FromString,
                    response_serializer=MessageBroker__pb2.UserAddress.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChatDiscovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatDiscovery(object):
    """Service for chat discovery
    """

    @staticmethod
    def PublishDiscoveryEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatDiscovery/PublishDiscoveryEvent',
            MessageBroker__pb2.Empty.SerializeToString,
            MessageBroker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RespondToDiscoveryEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatDiscovery/RespondToDiscoveryEvent',
            MessageBroker__pb2.UserAddress.SerializeToString,
            MessageBroker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDiscoveryResponses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ChatDiscovery/GetDiscoveryResponses',
            MessageBroker__pb2.Empty.SerializeToString,
            MessageBroker__pb2.UserAddress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class InsultChannelStub(object):
    """Service for managing insult channel functionalities
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToInsultChannel = channel.unary_stream(
                '/InsultChannel/SubscribeToInsultChannel',
                request_serializer=MessageBroker__pb2.Empty.SerializeToString,
                response_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                )
        self.SendInsult = channel.unary_unary(
                '/InsultChannel/SendInsult',
                request_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
                response_deserializer=MessageBroker__pb2.Empty.FromString,
                )


class InsultChannelServicer(object):
    """Service for managing insult channel functionalities
    """

    def SubscribeToInsultChannel(self, request, context):
        """Subscribes to the insult channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInsult(self, request, context):
        """Sends an insult message to the channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InsultChannelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToInsultChannel': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToInsultChannel,
                    request_deserializer=MessageBroker__pb2.Empty.FromString,
                    response_serializer=MessageBroker__pb2.ChatMessage.SerializeToString,
            ),
            'SendInsult': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInsult,
                    request_deserializer=MessageBroker__pb2.ChatMessage.FromString,
                    response_serializer=MessageBroker__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'InsultChannel', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InsultChannel(object):
    """Service for managing insult channel functionalities
    """

    @staticmethod
    def SubscribeToInsultChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/InsultChannel/SubscribeToInsultChannel',
            MessageBroker__pb2.Empty.SerializeToString,
            MessageBroker__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendInsult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/InsultChannel/SendInsult',
            MessageBroker__pb2.ChatMessage.SerializeToString,
            MessageBroker__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
